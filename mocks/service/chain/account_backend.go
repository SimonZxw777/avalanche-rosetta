// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package chain

import (
	context "context"

	types "github.com/coinbase/rosetta-sdk-go/types"
	mock "github.com/stretchr/testify/mock"
)

// AccountBackend is an autogenerated mock type for the AccountBackend type
type AccountBackend struct {
	mock.Mock
}

// AccountBalance provides a mock function with given fields: ctx, req
func (_m *AccountBackend) AccountBalance(ctx context.Context, req *types.AccountBalanceRequest) (*types.AccountBalanceResponse, *types.Error) {
	ret := _m.Called(ctx, req)

	var r0 *types.AccountBalanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.AccountBalanceRequest) *types.AccountBalanceResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AccountBalanceResponse)
		}
	}

	var r1 *types.Error
	if rf, ok := ret.Get(1).(func(context.Context, *types.AccountBalanceRequest) *types.Error); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.Error)
		}
	}

	return r0, r1
}

// AccountCoins provides a mock function with given fields: ctx, req
func (_m *AccountBackend) AccountCoins(ctx context.Context, req *types.AccountCoinsRequest) (*types.AccountCoinsResponse, *types.Error) {
	ret := _m.Called(ctx, req)

	var r0 *types.AccountCoinsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.AccountCoinsRequest) *types.AccountCoinsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.AccountCoinsResponse)
		}
	}

	var r1 *types.Error
	if rf, ok := ret.Get(1).(func(context.Context, *types.AccountCoinsRequest) *types.Error); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.Error)
		}
	}

	return r0, r1
}
